# vim: ft=sh
use "core"

SUBCOMMAND_DESC="Update machine commands"
SUBCOMMAND_HELP=$(cat <<EOH
Usage ${MAIN_COMMAND} ${SUBCOMMAND}

run               Update machine with latest definitions

dry               Do not actually execute do_run, show
                  definitions that would run as NOOP.
                  This should be safe as long the run checks
                  are safe.

list              List the definitions that will be executed
                  for this machine.

force             Force execution regardless run checks results.
                  This is potentially dangerous.

EOH
)

function _recur() {
  local dir="${1}"
  local cmd="${2}"
  log "_recur: ${dir} cmd: ${cmd}"
  if [[ -d ${dir} ]]; then
    for i in $(export LC_COLLATE=C; find ${dir} -type f -or -type l | sort); do
      log "loading: ${i}"
      in_cyan ">>>${i##${GRIND_DEF_DIR}/}<<<\n";
      eval "${2} ${i}";
    done
  fi
}

function _load_recur() {
  log "invoke _recur dir: ${1} cmd: source"
  _recur "${1}" "source";
}

function _list_recur() {
  log "invoke _recur dir: ${1} cmd: #"
  _recur "${1}" "#";
}

function _call() {
  local func="${1}"
  local ddirs=("${!2}")
  for d in ${ddirs[@]}; do
    ${func} ${d}
  done
}

def_dirs=(
  "${GRIND_DEF_DIR}/global"
  "${GRIND_DEF_DIR}/machines/${GRIND_MACHINE_NAME}")


case ${1} in
  run)
    in_cyan "Update run\n"
    _call _load_recur def_dirs[@]
  ;;
  list)
    in_cyan "Update listing definitions\n"
    _call _list_recur def_dirs[@]
  ;;
  dry)
    in_cyan "Update using dry run\n"
    use "core-dryrun"
    _call _load_recur def_dirs[@]
  ;;
  force)
    in_cyan "Update using force\n"
    warn "Force will run definitions regardless of its run checks results\n"
    warn "This is potentially dangerous\n"
    warn "Press return to continue any other key to cancel..."

    read -n1 -s key

    if [[ "$key" == "" ]]; then
      use "core-force"
      _call _load_recur def_dirs[@]
    else
      in_yellow "\nCanceled.\n"
    fi
  ;;
esac
